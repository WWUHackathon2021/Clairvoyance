{"version":3,"sources":["utils/cameraData.tsx","views/MapView.tsx","views/CameraView.tsx","App.tsx"],"names":["cameraData","MapView","props","cameraUrl","setCameraFunction","circles","map","camera","CircleMarker","center","y","x","Popup","minWidth","maxWidth","src","url","style","width","MapContainer","zoom","height","isLandscape","TileLayer","CameraView","useState","Date","forceRefreshStr","setForceRefreshStr","useEffect","intervalHandle","setInterval","clearInterval","backgroundColor","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","styles","StyleSheet","create","container","flex","App","currentCamera","setCurrentCamera","containerRef","useRef","useSize","initialWidth","window","innerWidth","initialHeight","innerHeight","viewStyle","View","StatusBar","ref","display","flexDirection"],"mappings":"47kiCAQaA,E,YCEN,SAASC,EAAQC,GAGtB,IAA8BC,IAIT,gEAHnBD,EAAME,kBAAkBD,GAK1B,IAAME,EAAUL,EAAWM,KAAI,SAAAC,GAC7B,OACA,kBAACC,EAAA,EAAD,CAAcC,OAAQ,CAACF,EAAOG,EAAGH,EAAOI,IACtC,kBAACC,EAAA,EAAD,CACEC,SAAU,IACVC,SAAU,KACV,yBAAKC,IAAKR,EAAOS,IAAKC,MAAO,CAACC,MAAM,eAM1C,OACI,kBAACC,EAAA,EAAD,CAAcV,OAAQ,CAAC,YAAa,aAAcW,KAAM,GAAIH,MAAO,CAC/DC,MAAO,OACPG,OAAQnB,EAAMoB,YAAc,QAAU,SAExC,kBAACC,EAAA,EAAD,CACEP,IAAI,uDAELX,GC/BF,SAASmB,EAAWtB,GAAuB,IAAD,EAGDuB,mBAAS,IAAIC,MAHZ,WAGxCC,EAHwC,KAGvBC,EAHuB,KAY/C,OARAC,qBAAU,WACR,IAAIC,EAAiBC,aAAY,WAAQH,EAAmB,IAAIF,QAAY,MAE5E,OAAO,WACLM,cAAcF,OAKhB,yBAAKb,MAAO,CACVgB,gBAAiB,QACjBC,gBAAgB,QAAShC,EAAMC,UAAhB,IAA6BwB,EAA7B,KACfQ,eAAgB,UAChBC,iBAAkB,YAClBC,mBAAoB,gBACpBhB,OAAQnB,EAAMoB,YAAc,QAAU,UCpB5C,IAsCMgB,EAASC,IAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,KAIKC,IA5CH,WAAO,IAAD,EAC0BlB,mBAAS,IADnC,WACTmB,EADS,KACMC,EADN,KAEVC,EAAeC,iBAAO,MAFZ,EAG0BC,YAAQF,EAAc,CAACG,aAAaC,OAAOC,WAAYC,cAAcF,OAAOG,cAHtG,WAIV/B,EAJU,UAMVgC,EAAgC,CACpCZ,KAAM,OAGR,OACE,kBAACa,EAAA,EAAD,CAAMtC,MAAOqB,EAAOG,WAClB,kBAACe,EAAA,EAAD,CAAWvC,MAAM,SACjB,yBAAKwC,IAAKX,EACV7B,MAAO,CACLC,MAAM,OACNG,OAAO,OACPY,gBAAiB,MACjByB,QAAS,OACTC,cAAerC,EAAc,MAAQ,WAErC,yBAAKL,MAAOqC,GACV,kBAACrD,EAAD,CACEG,kBAAoByC,EACpBvB,YAAaA,KAGjB,yBAAKL,MAAOqC,GACV,kBAAC9B,EAAD,CACErB,UAAYyC,EACZtB,YAAaA,S","file":"static/js/app.835ace4e.chunk.js","sourcesContent":["import cameraJSON from '../assets/cameras.json'\r\n\r\nexport interface camera {\r\n    x: number,\r\n    y: number,\r\n    url: string\r\n  }\r\n\r\nexport const cameraData:camera[] = cameraJSON as camera[];","import React from 'react';\r\nimport { MapContainer, TileLayer, Popup, CircleMarker } from 'react-leaflet';\r\nimport { cameraData, camera } from '../utils/cameraData';\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\ntype MapProps = {\r\n  setCameraFunction: (cameraUrl: string) => void,\r\n  isLandscape: boolean,\r\n};\r\n\r\nexport function MapView(props:MapProps){\r\n  // TODO: Link this event handler to the leaflet map so when a pin is selected\r\n  // the new camera URL gets passed here.\r\n  function handleCameraSelected(cameraUrl: string) {\r\n    props.setCameraFunction(cameraUrl);\r\n  }\r\n  // Hard code this temporarily\r\n  handleCameraSelected('https://www.seattle.gov/trafficcams/images/Aurora_N_46_NS.jpg');\r\n\r\n  const circles = cameraData.map(camera => {\r\n    return (\r\n    <CircleMarker center={[camera.y, camera.x]}>\r\n      <Popup\r\n        minWidth={200}\r\n        maxWidth={500}>\r\n        <img src={camera.url} style={{width:'100%'}}/>\r\n      </Popup>\r\n    </CircleMarker>\r\n    );\r\n  });\r\n\r\n  return (\r\n      <MapContainer center={[47.6215254, -122.3646686]} zoom={10} style={{\r\n          width: '100%',\r\n          height: props.isLandscape ? '100vh' : '50vh'\r\n        }}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        {circles}\r\n      </MapContainer>\r\n  );\r\n}","import React, { FunctionComponent, useEffect, useState } from 'react';\r\nimport { View, StyleSheet, Image, Dimensions, Text } from 'react-native';\r\n\r\ntype CameraViewProps = {\r\n  cameraUrl: string,\r\n  isLandscape: boolean,\r\n};\r\n\r\nexport function CameraView(props:CameraViewProps){\r\n  // This is a hack to force react native to clear the img cache.\r\n  // We set a query param on the img URL every interval to force the update.\r\n  const [forceRefreshStr, setForceRefreshStr] = useState(new Date());\r\n  useEffect(() => {\r\n    let intervalHandle = setInterval(() => { setForceRefreshStr(new Date()); }, 15000);\r\n\r\n    return function cleanup() {\r\n      clearInterval(intervalHandle);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div style={{\r\n      backgroundColor: 'black',\r\n      backgroundImage: `url(\"${props.cameraUrl}?${forceRefreshStr}\")`,\r\n      backgroundSize: 'contain',\r\n      backgroundRepeat: 'no-repeat',\r\n      backgroundPosition: 'center center',\r\n      height: props.isLandscape ? '100vh' : '50vh'\r\n    }}></div>\r\n  );\r\n}\r\n","import { StatusBar } from 'expo-status-bar';\r\nimport useSize from '@react-hook/size';\r\nimport React, { useState, useRef } from 'react';\r\nimport { StyleSheet, View } from 'react-native';\r\nimport { MapView } from './views/MapView';\r\nimport { CameraView } from './views/CameraView';\r\n\r\nconst App = () => {\r\n  const [currentCamera, setCurrentCamera] = useState('');\r\n  const containerRef = useRef(null);\r\n  const [containerWidth, containerHeight] = useSize(containerRef, {initialWidth:window.innerWidth, initialHeight:window.innerHeight});\r\n  const isLandscape:boolean = containerWidth > containerHeight;\r\n  \r\n  const viewStyle:React.CSSProperties = {\r\n    flex: '50%'\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <StatusBar style=\"auto\" />\r\n      <div ref={containerRef}\r\n      style={{\r\n        width:'100%',\r\n        height:'100%',\r\n        backgroundColor: 'red',\r\n        display: 'flex',\r\n        flexDirection: isLandscape ? 'row' : 'column'\r\n      }}>\r\n        <div style={viewStyle}>\r\n          <MapView\r\n            setCameraFunction={ setCurrentCamera }\r\n            isLandscape={isLandscape}\r\n          />\r\n        </div>\r\n        <div style={viewStyle}>\r\n          <CameraView\r\n            cameraUrl={ currentCamera }\r\n            isLandscape={isLandscape}\r\n           />\r\n        </div>\r\n      </div>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1\r\n  },\r\n});\r\n\r\nexport default App;"],"sourceRoot":""}